package LeetCode;

import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;

public class test_code347 {
    public static void main(String[] args){
        int[] expected={166,-719,-74,-11,16,578,-773,-393,666,743,844,-677,-195,-54,84,193,268,287,652,845,-802,-774,-737,-412,-329,-96,-18,73,132,351,417,538,623,-763,-648,-439,-72,-14,76,142,300,392,464,566,615,763,893,-962,-959,-771,-717,-454,-435,-390,-340,-274,157,216,533,563,657,695,784,894,964,-997,-948,-740,-686,-635,-386,-346,-302,-292,-252,-101,-33,71,130,207,239,364,453,490,603,607,624,644,656,700,709,778,781,813,920,945,962,-968,-950,-949,-937,-842,-674,-543,-522,-254,-212,-126,-90,-79,4,95,108,117,139,170,181,189,379,413,415,455,475,481,548,586,612,680,740,797,803,999,-992,-987,-967,-875,-865,-858,-819,-803,-731,-727,-712,-711,-685,-596,-594,-530,-528,-519,-499,-420,-417,-414,-399,-394,-379,-358,-351,-350,-276,-266,-187,-84,-39,9,87,138,228,269,339,341,388,414,456,478,483,503,524,554,568,581,619,642,646,694,703,761,786,878,904,914,931,940,952,963,978,991,-983,-970,-738,-725,-679,-589,-588,-574,-524,-520,-508,-464,-436,-408,-365,-353,-331,-306,-298,-294,-257,-226,-198,-190,-139,-120,-77,-60,-50,12,33,51,62,118,125,204,209,223,233,241,313,358,370,396,471,506,529,556,597,601,620,728,739,750,756,767,783,824,825,837,897,900,913,919,933,965,994,-995,-991,-982,-964,-952,-904,-893,-873,-863,-820,-814,-810,-752,-735,-726,-682,-668,-611,-603,-601,-578,-564,-549,-546,-541,-535,-469,-446,-427,-403,-395,-391,-387,-349,-332,-244,-233,-158,-135,-131,-128,-81,-43,-32,-7,18,31,36,55,75,103,115,134,186,214,242,250,259,276,280,282,301,305,336,353,373,377,411,430,448,486,521,550,565,616,651,665,705,706,707,712,722,754,762,777,779,799,814,816,838,839,841,865,874,908,946,957,988,-999,-996,-989,-978,-925,-890,-885,-876,-874,-864,-852,-838,-818,-779,-769,-766,-745,-742,-730,-708,-702,-637,-577,-570,-559,-529,-509,-503,-480,-479,-473,-467,-462,-442,-424,-388,-377,-328,-327,-323,-278,-239,-236,-224,-211,-197,-193,-188,-177,-169,-157,-129,-103,-83,-78,-63,-49,-40,-15,2,28,34,35,40,44,52,100,113,119,151,164,235,238,247,249,278,285,293,306,311,321,338,359,361,378,410,427,431,435,461,497,511,522,527,549,553,593,595,614,645,661,662,674,701,787,801,805,827,876,912,923,926,928,968,981,990,-954,-947,-939,-882,-855,-845,-837,-831,-822,-801,-792,-744,-720,-713,-700,-694,-692,-681,-645,-644,-634,-625,-610,-600,-580,-575,-555,-551,-516,-515,-502,-497,-486,-481,-468,-411,-409,-406,-380,-373,-355,-343,-316,-312,-310,-277,-265,-251,-250,-229,-191,-176,-173,-164,-150,-145,-143,-104,-69,-37,-28,-6,5,10,17,30,32,60,78,97,99,102,137,152,155,169,202,205,262,275,284,298,302,317,326,327,329,335,344,345,356,376,405,421,460,482,484,501,535,559,606,636,641,667,668,677,689,752,766,768,791,798,806,822,834,852,884,916,929,951,-979,-966,-955,-938,-922,-918,-911,-908,-907,-891,-884,-856,-854,-840,-829,-817,-796,-786,-767,-764,-710,-701,-691,-688,-683,-671,-669,-651,-631,-628,-612,-607,-605,-579,-567,-558,-533,-501,-485,-470,-431,-429,-428,-413,-354,-345,-311,-303,-282,-268,-240,-221,-203,-161,-153,-149,-142,-133,-127,-124,-118,-100,-91,-82,-57,-13,43,53,63,74,85,88,92,109,112,114,116,127,133,150,162,175,185,192,236,248,310,316,323,355,366,385,393,399,419,439,441,452,476,479,517,543,546,569,575,589,592,602,627,634,638,691,715,716,726,737,764,765,770,773,780,817,826,828,840,846,848,857,869,870,934,944,973,984,997,-988,-986,-973,-969,-961,-945,-941,-932,-928,-903,-902,-892,-878,-860,-841,-823,-805,-784,-780,-776,-768,-747,-707,-705,-699,-690,-675,-672,-666,-665,-664,-655,-641,-639,-632,-630,-620,-618,-615,-590,-586,-583,-582,-539,-536,-526,-494,-489,-483,-474,-471,-466,-457,-451,-447,-443,-438,-422,-421,-405,-384,-374,-364,-335,-325,-305,-288,-281,-271,-259,-241,-231,-200,-174,-162,-146,-136,-125,-86,-85,-66,-64,-61,-31,-23,-21,-5,-3,37,58,80,86,89,94,104,106,129,182,183,187,198,200,234,255,257,294,297,307,315,318,350,372,380,384,394,403,424,436,444,494,542,545,547,558,588,630,632,643,648,650,684,704,719,730,751,759,776,785,796,810,820,829,831,836,842,853,861,895,896,899,961,966,975,989,993,-977,-976,-972,-960,-951,-940,-935,-934,-927,-919,-872,-871,-830,-816,-815,-793,-775,-754,-749,-732,-721,-716,-715,-706,-703,-684,-659,-650,-640,-636,-633,-629,-621,-606,-599,-585,-584,-566,-565,-560,-556,-550,-540,-538,-537,-534,-507,-492,-476,-475,-461,-449,-445,-418,-402,-400,-367,-347,-339,-333,-318,-317,-314,-304,-299,-289,-262,-258,-245,-237,-230,-228,-222,-204,-182,-175,-165,-148,-147,-134,-113,-110,-93,-56,-34,-29,-9,7,13,26,41,47,54,70,96,120,122,145,148,154,158,160,165,178,213,226,251,253,254,260,277,283,324,340,349,357,360,365,374,382,386,408,409,434,454,459,463,469,472,489,492,502,504,507,508,512,513,523,530,537,571,572,573,580,605,610,618,631,635,658,660,664,679,683,693,717,725,731,738,744,782,792,802,809,815,832,835,859,872,879,903,909,917,932,950,953,955,967,995,998};
        int[] output={7,-9,13,26,-29,-34,41,47,54,-56,70,-93,96,-110,-113,120,122,-134,145,-147,-1,-148,148,154,158,160,-165,165,-175,178,-182,-204,213,-222,226,-228,-230,-237,-245,251,253,254,-258,260,-262,277,283,-289,-299,-304,-314,-317,-318,324,-333,-339,-4,340,-347,349,357,360,365,-367,374,382,386,-400,-402,408,409,-418,434,-445,-449,454,459,-461,463,469,472,-475,-476,489,-492,492,502,504,-507,507,508,512,513,523,530,-534,-537,-538,537,-540,-550,-556,-560,-565,-566,571,572,573,580,-584,-585,-599,605,-606,610,618,-621,-629,631,-633,-636,635,-640,-650,658,-659,660,664,679,-684,683,693,-703,-706,-715,-716,717,-721,725,-732,731,738,744,-749,-754,-775,782,792,-793,802,809,-815,-816,815,-830,832,835,859,-871,-872,872,879,903,909,917,-919,-927,932,-934,-935,-940,950,-951,953,955,-3,-5,-21,-23,-31,37,58,-61,-64,-66,80,-85,-86,86,89,94,104,106,-125,129,-136,-146,-162,-174,182,183,187,198,-200,200,-231,234,-241,255,257,-259,-271,-281,-288,294,297,-305,307,315,318,-325,-335,350,-364,372,-374,380,-384,384,394,403,-405,-421,-422,424,436,-438,0,-443,444,-447,-451,-457,-466,-471,-474,8,-483,-489,-494,11,-960,494,-526,-536,-539,542,545,547,558,-582,-583,-586,588,-590,-615,-618,-620,-630,630,-632,632,-639,-641,643,648,650,-655,-664,-665,-666,-672,-675,684,-690,-699,704,-705,-707,719,730,-747,751,759,-768,-776,776,-780,-784,785,796,-805,810,820,-823,829,831,836,-841,842,853,-860,861,-878,-892,895,896,899,-902,-903,-928,-932,-941,-945,-961,961,966,-969,-973,975,-986,-988,989,-13,43,53,-57,63,74,-82,85,88,-91,92,-100,109,112,114,116,-118,-124,-127,127,-133,133,15,-142,-149,150,-153,-161,993,162,175,185,192,-203,-221,236,-240,248,-268,-282,-303,310,-311,316,323,-345,-354,355,366,385,393,399,-413,419,-428,-429,-431,439,441,452,-470,476,479,-485,-501,517,-533,543,546,-558,-567,569,575,-579,589,592,602,-605,-607,-612,-628,627,-631,634,638,-651,-669,-671,-683,-688,-691,691,-701,-710,715,716,726,737,-764,764,765,-767,770,773,780,-786,-796,-817,817,826,828,-829,-840,840,846,848,-854,-856,857,869,870,-884,-891,-907,-908,-911,-918,-922,934,-938,944,-955,-966,973,-979,984,997,-6,5,10,17,-28,30,32,-37,60,-69,78,97,99,102,-104,137,-143,-145,-150,152,155,-164,169,-173,-176,-191,202,205,-229,-250,-251,262,-265,275,-277,284,298,302,-310,-312,-316,317,326,327,329,335,-343,344,345,-355,356,-373,376,-380,405,-406,-409,-411,421,460,-468,-481,482,484,-486,-497,501,-502,-515,-516,535,-551,-555,559,-575,-580,-600,606,-610,-625,-634,636,641,-644,-645,667,668,677,-681,689,-692,-694,-700,-713,-720,-744,752,766,768,-792,791,798,-801,806,-822,822,-831,834,-837,-845,852,-855,-882,884,916,929,-939,-947,951,-954,2,-15,28,34,35,-40,40,44,-49,52,-63,-78,-83,100,-103,113,119,-129,151,-157,164,-169,-177,-188,-193,-197,-211,-224,-236,235,-239,238,247,249,-278,278,285,293,306,311,321,-323,-327,-328,338,359,361,-377,378,-388,410,-424,427,431,435,-442,-462,461,-467,-473,-479,-480,497,-503,-509,511,522,527,-529,549,553,-559,-570,-577,593,595,614,-637,645,661,662,674,701,-702,-708,-730,-742,-745,-766,-769,-779,787,801,805,-818,827,-838,-852,-864,-874,-876,876,-885,-890,912,923,-925,926,928,968,-978,981,-989,990,-996,-999,-7,18,-32,31,36,-43,55,75,-81,103,115,-128,-131,-135,134,-158,186,214,-233,242,-244,250,259,276,280,282,301,305,-332,336,-349,353,373,377,-387,-391,-395,-403,411,-427,430,-446,448,-469,486,521,-535,-541,-546,-549,550,-564,565,-578,-601,-603,-611,616,651,665,-668,-682,705,706,707,712,722,-726,-735,-752,754,762,777,779,799,-810,-814,814,816,-820,838,839,841,-863,865,-873,874,-893,-904,908,946,-952,957,-964,-982,988,-991,-995,12,33,-50,51,-60,62,-77,118,-120,125,-139,-190,-198,204,209,223,-226,233,241,-257,-294,-298,-306,313,-331,-353,358,-365,370,396,-408,-436,-464,471,506,-508,-520,-524,529,556,-574,-588,-589,597,601,620,-679,-725,728,-738,739,750,756,767,783,824,825,837,897,900,913,919,933,965,-970,-983,994,9,-39,-84,87,138,-187,228,-266,269,-276,339,341,-350,-351,-358,-379,388,-394,-399,-414,414,-417,-420,456,478,483,-499,503,-519,524,-528,-530,554,568,581,-594,-596,619,642,646,-685,694,703,-711,-712,-727,-731,761,786,-803,-819,-858,-865,-875,878,904,914,931,940,952,963,-967,978,-987,991,-992,4,-79,-90,95,108,117,-126,139,170,181,189,-212,-254,379,413,415,455,475,481,-522,-543,548,586,612,-674,680,740,797,803,-842,-937,-949,-950,-968,999,-33,71,-101,130,207,239,-252,-292,-302,-346,364,-386,453,490,603,607,624,-635,644,656,-686,700,709,-740,778,781,813,920,945,-948,962,-997,157,216,-274,-340,-390,-435,-454,533,563,657,695,-717,-771,784,894,-959,-962,964,-14,-72,76,142,300,392,-439,464,566,615,-648,-763,763,893,-18,73,-96,132,-329,351,-412,417,538,623,-737,-774,-802,-54,84,193,-195,268,287,652,-677,845,-393,666,743,-773,844,-11,16,-74,578,-719,166};
        int[] output2={-9};
        Map<Integer, Integer> numbers_count=new HashMap<>();
        
        for(int i:output){
            if(numbers_count.containsKey(i)){
                numbers_count.replace(i, numbers_count.get(i), numbers_count.get(i)+1);
            }
            else{
                numbers_count.put(i,1);
            }
        }

        for(Object i:numbers_count.keySet()){
            if(numbers_count.get(i)>1){
                //System.out.println((Integer)(i));
            }
        }
        //没有重复
        Boolean flag=true;
        for(int i:output){
            flag=true;
            for(int j:expected){
                if(i==j){
                    flag=false;
                    break;
                }
            }
            if(flag){
                System.out.println(i);
            }
        }
    }
}
